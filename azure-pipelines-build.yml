# This will run the pipeline whenever anything new is committed to master
trigger:
  - main

jobs:
  - job: build and publish docs
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
      displayName: 'Use Python 3.8'
      # Setup auth against aws
    - bash: |
        VERSION=1.14.6
        BUILD_DATE=2019-08-22
        DOWNLOAD_URL=https://amazon-eks.s3-us-west-2.amazonaws.com/${VERSION}/${BUILD_DATE}/bin/linux/amd64/aws-iam-authenticator
        LOCAL_FILE=./aws-iam-authenticator
        curl -Lo $LOCAL_FILE $DOWNLOAD_URL
        chmod +x $LOCAL_FILE
        sudo mv $LOCAL_FILE /usr/local/bin

        # Install saml2aws
        VERSION=2.20.0
        DOWNLOAD_URL=https://github.com/Versent/saml2aws/releases/download/v${VERSION}/saml2aws_${VERSION}_linux_amd64.tar.gz
        LOCAL_FILE=./saml2aws.tar.gz
        curl -Lo $LOCAL_FILE $DOWNLOAD_URL
        tar xvzf $LOCAL_FILE
        rm $LOCAL_FILE
        sudo mv saml2aws /usr/local/bin

        # Configure saml2aws
        saml2aws configure --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto --session-duration=28800 --skip-prompt

        saml2aws login --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto --skip-prompt --force --disable-keychain
        eval $(saml2aws script --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto)
      env:
        SAML2AWS_PASSWORD: $(SAML2AWS_PASSWORD)
        SAML2AWS_USERNAME: $(SAML2AWS_USERNAME)
        SAML2AWS_ROLE: $(SAML2AWS_ROLE)
    - script: |
        pip install -r requirements-dev.txt
        pip install -r requirements.txt
        pip install -e .
    - script: |
        make html
      workingDirectory: docs/
      displayName: Build docs
    # FIX ME!
    - script: |
        # aws s3 sync docs/_build/html/ s3://BUCKET/
      displayName: Sync with s3

  - job: build and publish package
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
      displayName: 'Use Python 3.8'

    - script: |
        pip install wheel
        pip install twine
      displayName: 'install twine'

    - task: TwineAuthenticate@1
      displayName: 'Twine Authenticate'
      inputs:
        artifactFeed: smartdata

    - script: |
        python setup.py bdist_wheel
      displayName: 'build'
      
    - script: |
        python -m twine upload -r smartdata --config-file $(PYPIRC_PATH) dist/*.whl
      displayName: 'upload'